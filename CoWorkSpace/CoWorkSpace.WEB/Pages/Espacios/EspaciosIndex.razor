@page "/espacios"
@using CurrieTechnologies.Razor.SweetAlert2
@using CoWorkSpace.Shared.Entidades
@using CoWorkSpace.WEB.Repositories
@using CoWorkSpace.WEB.Shared
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Espacio</h3>


<div class="mb-3">

    <a class="btn btn-primary" href="/espacios/Create">Crear Espacio</a>

</div>

<GenericList MyList="Espacios">

    <Body>

        <table class="table table-striped">

            <thead>

                <tr>

                    <th>Espacio</th>

                </tr>



            </thead>

            <tbody>

                @foreach (var espacio in Espacios)

                {

                    <tr>

                        <td>

                            @espacio.Nombre

                        </td>

                        <td>

                            @espacio.Descripcion

                        </td>

                        <td>

                            @espacio.CantidadMax

                        </td>

                        <td>

                            <a href="/Espacios/edit/@espacio.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>

                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(espacio))><i class="oi oi-trash" /> Borrar</button>
                        </td>

                    </tr>
                }

            </tbody>

        </table>



    </Body>



</GenericList>


@code {



    public List<Espacio> Espacios { get; set; }



    protected async override Task OnInitializedAsync()

    {

        await Load();

    }

    private async Task Load()

    {

        var responseHppt = await repository.GetAsync<List<Espacio>>("/api/Espacios");

        Espacios = responseHppt.Response!;

    }



    private async Task DeleteAsync(Espacio Espacio)

    {

        var result = await swal.FireAsync(new SweetAlertOptions

            {

                Title = "Confirmación",

                Text = "¿Esta seguro que quieres borrar el registro?",

                Icon = SweetAlertIcon.Question,

                ShowCancelButton = true

            });

        var confirm = string.IsNullOrEmpty(result.Value);



        if (confirm)

        {

            return;

        }

        var responseHTTP = await repository.DeleteAsync<Espacio>($"api/Espacios/{Espacio.Id}");



        if (responseHTTP.Error)

        {

            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)

            {

                navigationManager.NavigateTo("/");

            }

            else

            {

                var mensajeError = await responseHTTP.GetErrorMessageAsync();

                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);

            }

        }

        else

        {

            await Load();

        }

    }

}





